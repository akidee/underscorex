Underscorex are some basic extensions for underscore

- basic, common use
- small
- all environments, server and client
- Extend built-in JavaScript objects to implement ECMA5 functionality, if missing



Policy

1. _Some_ ECMA5 functionality must be available in _all_ JavaScript engines:

  Object.keys
  Date.prototype.toISOString
  JSON.parse/stringify
  Function.prototype.bind
  String.prototype.trim
  Array.prototype.indexOf/lastIndexOf
  Array.prototype.every/some/forEach/map/filter
  Array.prototype.reduce/reduceRight

  Omitted:

  Object.getPrototypeOf
  Date.now
  Array.isArray

  It is not possible to correctly implement further ECMA5 functionality, if your engine does not support it. For example, Object.seal or strict mode cannot be mimicked. See http://kangax.github.com/es5-compat-table/

2. Functionality _beyond_ ECMA5 - functions that are already included in underscore:

  See http://documentcloud.github.com/underscore/

3. My own underscore mixins:

  _.log
    Alias of console.log

  _.extendDeep(a, b, preserve_a?)
    Extend object a with b by deep tree recursion

  _.objectToArray(object)
    Transforms an object to a list of lists with 2 elements each (key and value). Example:

    _.objectToArray({ a: 1, b: true }) --> [ [ a, 1 ], [ b, true ] ]

    Applying Array.prototype functionality to objects is very useful, but underscore's collection utilities return an array of the values of the passed objects and omit the keys. But we don't want to miss the keys and filter, sort, ... by them as well.

    For example, you can sort an object by keys by sorting the result of _.objectToArray(object) and then transform it back to an object with _.arrayToObject. The ECMA standard does _not_ force implementors to iterate over objects in the same order as the properties were defined, but all JS engines will do that for non-numeric properties. See http://stackoverflow.com/questions/280713/elements-order-in-a-for-in-loop/280861#280861

  _.arrayToObject(array)
    Transforms a list of lists - with key and value each - back to an object. Example:
    _.arrayToObject([ [ a, 1 ], [ 5, true ] ]) --> { 'a': 1, '5': true }

  _.escapeXml(string, newline?)

  _.simple(string)
    Get a simplified version of a string

  _.escapeForRegExp(string)
    Escape characters to make them non-semantic when using the string in a regular expression

  _.locale(object, locale?)
    Examples:
    var data = { de_DE: 'Zentrum', en_UK: 'centre', en: 'center' }
    _.locale(data, 'de') --> 'Zentrum'
    _.locale(data) --> 'center'

  _.MAX_INT
    Maximum integer in JavaScript. See http://www.irt.org/script/1031.htm

  _.MIN_INT
    0 - _.MAX_INT



How to - server

var _ = require('underscorex');

	

How to - server

Support for yabble ( http://github.com/jbrantly/yabble ) is coming soon.



Used code

http://code.google.com/p/ddr-ecma5/
http://www.JSON.org/json2.js